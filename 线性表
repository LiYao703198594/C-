#include <iostream>
#define MaxSize 50
using namespace std;
struct SqList {
    int data[MaxSize];
    int length=0;
};
bool ListInsert(SqList& L, int i, int e) {
    if (i<1 || i>L.length + 1)
        return false;
    if (L.length >= MaxSize)
        return false;
    for (int j = L.length; j >= i; j--)
        L.data[j] = L.data[j - 1];
    L.data[i - 1] = e;
    L.length++;
    return true;
}
bool ListDelete(SqList& L, int i, int& e) {
    if (i<1 || i>L.length)
        return false;
    e = L.data[i - 1];
    for (int j = i; j < L.length; j++)
        L.data[j - 1] = L.data[j];
    L.length--;
    return true;
}
int LocateElem(SqList L, int e) {
    int i;
    for (i = 0; i < L.length; i++)
        if (L.data[i] == e)
            return i + 1;
    return 0;
}
void ListPrint(SqList L) {
    for (int i = 0; i < L.length; i++)
        cout << L.data[i]<<" ";
    cout << endl;
}
int main()
{
    SqList L;
    int a = 1, i = 1;
    while (a) {
        cout << "1：创建\n2：插入\n3：删除\n4：搜索\n";
        cin >> a;
        switch (a) {
        case 1:
            for (i = 1; i<9999; i++) {
                cout << "输入第" << i << "个数字\n";
                cin >> a;
                if (a == 9999) break;
                ListInsert(L, i, a);
                ListPrint(L);
            }
            break;
        case 2:
            cout << "插入位置：\n";
            cin >> i;
            cout << "插入数字：\n";
            cin >> a;
            ListInsert(L, i, a);
            ListPrint(L);
            break;
        case 3:
            cout << "删除位置：\n";
            cin >> i;
            ListDelete(L, i, a);
            cout << "删除数字：" << a << endl;
            ListPrint(L);
            break;
        case 4:
            cout << "搜索数字：\n";
            cin >> a;
            cout << "位置：" << LocateElem(L, a) << endl;
            ListPrint(L);
            break;
        }
    }
    return 0;

}
